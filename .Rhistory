library(shiny)
library(googleVis)
shiny::runApp()
require(dplyr)
library(googleVis)
library(tidyr)
xfile.path = 'c:\\1\\USDRUB.txt'
col.date = 3
col.close = 8
xdate.format = '%Y%m%d'
raw.data = read.csv(file = xfile.path) #read.csv(file = 'c:\\1\\spx.csv') #
print(head(raw.data))
raw.data = raw.data %>% select(col.date, col.close)
names(raw.data) = c('xdate', 'xclose')
print(head(raw.data))
names(raw.data) = c('Date', 'USDRUB')
print(head(raw.data))
ticker = 'USDRUB'
names(raw.data) = c('Date', ticker)
save(file = 'chartdata.Rdata')
save(raw.data, file = 'chartdata.Rdata')
rm(raw.data)
raw.data = read.csv(file = xfile.path) #read.csv(file = 'c:\\1\\spx.csv') #
print(head(raw.data))
raw.data = raw.data %>% select(col.date, col.close)
ticker = 'USDRUB'
names(raw.data) = c('Date', ticker)
raw.data$xdate = as.Date(strptime(as.character(raw.data$xdate), xdate.format))
get(ticker)
get('ticker')
raw.data$xdate = as.Date(strptime(as.character(raw.data$Date), xdate.format))
print(head(raw.data))
raw.data = read.csv(file = xfile.path) #read.csv(file = 'c:\\1\\spx.csv') #
raw.data = raw.data %>% select(col.date, col.close)
ticker = 'USDRUB'
names(raw.data) = c('Date', ticker)
raw.data$xdate = as.Date(strptime(as.character(raw.data$Date), xdate.format))
print(head(raw.data))
raw.data$Date = as.Date(strptime(as.character(raw.data$Date), xdate.format))
raw.data = read.csv(file = xfile.path) #read.csv(file = 'c:\\1\\spx.csv') #
print(head(raw.data))
raw.data = raw.data %>% select(col.date, col.close)
ticker = 'USDRUB'
names(raw.data) = c('Date', ticker)
#save(raw.data, file = 'chartdata.Rdata')
raw.data$Date = as.Date(strptime(as.character(raw.data$Date), xdate.format))
print(head(raw.data))
target = 65
s1 = 1
s2 = 0.85
DrawAssetChart <- function (raw.data, expdate, ticker, s1=NULL, s2=NULL, target) {
today   = max(raw.data$Date)
expdate = as.Date(expdate)
frstday =  today - (expdate - today)*2.5
curprice =subset(raw.data, Date==today, xclose, drop=T)
s1 = curprice * s1
s2 = curprice * s2
add.data = data.frame(Date = as.Date(seq(from = today, to = expdate, by = 1)), get('ticker') = NA, Target = target)
chart.data = raw.data %>% filter(Date > frstday) %>% bind_rows(add.data)
# View(raw.data)
# +-----------------------+
# | Prepare data for plot |
# +-----------------------+
gchart = gvisComboChart(data = chart.data,
xvar=c('Date'),
yvar=c(ticker, 'Target'),
options = list(
series = "[{color:'red', targetAxisIndex: 0, lineWidth: 2},
{color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]",
height=400,
width=600,
seriesType='line',
legend= "{ position: 'bottom' }",
hAxis = "{baselineColor: 'white', gridlines: {color: 'white'}}"
) )
gchart$html$footer = ''
gchart$html$caption = ''
return(gchart)
}
DrawAssetChart <- function (raw.data, expdate, ticker, s1=NULL, s2=NULL, target) {
today   = max(raw.data$Date)
expdate = as.Date(expdate)
frstday =  today - (expdate - today)*2.5
curprice =subset(raw.data, Date==today, xclose, drop=T)
s1 = curprice * s1
s2 = curprice * s2
add.data = data.frame(Date=as.Date(seq(from=today, to=expdate, by=1)), Ticker = NA, Target = target)
chart.data = raw.data %>% filter(Date > frstday) %>% bind_rows(add.data)
# View(raw.data)
# +-----------------------+
# | Prepare data for plot |
# +-----------------------+
gchart = gvisComboChart(data = chart.data,
xvar=c('Date'),
yvar=c(ticker, 'Target'),
options = list(
series = "[{color:'red', targetAxisIndex: 0, lineWidth: 2},
{color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]",
height=400,
width=600,
seriesType='line',
legend= "{ position: 'bottom' }",
hAxis = "{baselineColor: 'white', gridlines: {color: 'white'}}"
) )
gchart$html$footer = ''
gchart$html$caption = ''
return(gchart)
}
DrawAssetChart <- function (raw.data, expdate, ticker, s1=NULL, s2=NULL, target) {
today   = max(raw.data$Date)
expdate = as.Date(expdate)
frstday =  today - (expdate - today)*2.5
curprice =subset(raw.data, Date==today, xclose, drop=T)
s1 = curprice * s1
s2 = curprice * s2
add.data = data.frame(Date=as.Date(seq(from=today, to=expdate, by=1)), Ticker = NA, Target = target)
names(add.data) = c('Date', ticker, 'Target')
chart.data = raw.data %>% filter(Date > frstday) %>% bind_rows(add.data)
# View(raw.data)
# +-----------------------+
# | Prepare data for plot |
# +-----------------------+
gchart = gvisComboChart(data = chart.data,
xvar=c('Date'),
yvar=c(ticker, 'Target'),
options = list(
series = "[{color:'red', targetAxisIndex: 0, lineWidth: 2},
{color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]",
height=400,
width=600,
seriesType='line',
legend= "{ position: 'bottom' }",
hAxis = "{baselineColor: 'white', gridlines: {color: 'white'}}"
) )
gchart$html$footer = ''
gchart$html$caption = ''
return(gchart)
}
DrawAssetChart(raw.data, as.Date('2015-15-09'), ticker, s1=NULL, s2=NULL, target)
DrawAssetChart(raw.data, as.Date('2015-09-15'), ticker, s1=NULL, s2=NULL, target)
get(ticker)
get('ticker')
DrawAssetChart <- function (raw.data, expdate, ticker, s1=NULL, s2=NULL, target) {
today   = max(raw.data$Date)
expdate = as.Date(expdate)
frstday =  today - (expdate - today)*2.5
curprice =subset(raw.data, Date==today, get('ticker'), drop=T)
s1 = curprice * s1
s2 = curprice * s2
add.data = data.frame(Date=as.Date(seq(from=today, to=expdate, by=1)), Ticker = NA, Target = target)
names(add.data) = c('Date', ticker, 'Target')
chart.data = raw.data %>% filter(Date > frstday) %>% bind_rows(add.data)
# View(raw.data)
# +-----------------------+
# | Prepare data for plot |
# +-----------------------+
gchart = gvisComboChart(data = chart.data,
xvar=c('Date'),
yvar=c(ticker, 'Target'),
options = list(
series = "[{color:'red', targetAxisIndex: 0, lineWidth: 2},
{color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]",
height=400,
width=600,
seriesType='line',
legend= "{ position: 'bottom' }",
hAxis = "{baselineColor: 'white', gridlines: {color: 'white'}}"
) )
gchart$html$footer = ''
gchart$html$caption = ''
return(gchart)
}
DrawAssetChart(raw.data, as.Date('2015-09-15'), ticker, s1=NULL, s2=NULL, target)
plot(DrawAssetChart(raw.data, as.Date('2015-09-15'), ticker, s1=NULL, s2=NULL, target))
save(raw.data, file = 'chartdata.Rdata')
rm(raw.data)
load('chartdata.Rdata')
plot(DrawAssetChart(raw.data, as.Date('2015-09-15'), ticker, s1=NULL, s2=NULL, target))
source(file = 'structplay.R', echo=F)
shiny::runApp()
shiny::runApp()
shiny::runApp()
raw.data[which.max(raw.data$Date),]
lastpoint = raw.data[which.max(raw.data$Date),]
today = lastpoint$Date[drop=T]
curprice = lastpoint[[2]][drop=T]
curprice
today = lastpoint[[1]][drop=T]
today
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
lastpoint[[1]][drop=T]
shiny::runApp()
shiny::runApp()
shiny::runApp()
params = StructParams(rdepo=0.15, def=def, assetPrice=assetPrice, startDate=startDate, endDate=endDate, sigma=0.2, r=0.1, TypeFlag='c', X=assetPrice)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
raw.data[which.max(raw.data$Date),]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(scales)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(dplyr)
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(googleVis)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp("StructPlay", display.mode = "showcase")
runApp(display.mode = "showcase")
runApp()
runApp()
options()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
