shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
version
install.packages("installr")
require(installr)
updateR()
shiny::runApp()
require(quantmod)
ticker = 'RTSI.RS'
getSymbols(ticker)
ticker = 'RTS.RS'
getSymbols(ticker)
View(eval(ticker))
View(I(ticker))
getSymbols(ticker, auto.assign = F)
tickerdata = getSymbols(ticker, auto.assign = F)
View(tickerdata)
View(tickerdata[['RTS.RS.Close']])
View(tickerdata['RTS.RS.Close'])
View(tickerdata$RTS.RS.Close)
View(tickerdata$eval(paste0(ticker, '.Close') )
)
eval(paste0(ticker, '.Close'))
tickerdata$(paste0(ticker, '.Close'))
tickerdata$paste0(ticker, '.Close')
tickerdata[[paste0(ticker, '.Close')]]
tickerdata[,paste0(ticker, '.Close')]
tickerdata = getSymbols(ticker, auto.assign = F)[, paste0(ticker, '.Close')]
plot(tickerdata)
tickerdata$Vaue
tickerdata$Value
tickerdata$dates
tickerdata$date
index(tickerdata)
require(dplyr)
index(tickerdata) %>% max
period = 1/4
expdate = today + period*365
today   = index(tickerdata) %>% max
expdate = today + period*365
expdate
projection=3
frstday =  today - (expdate - today)*projection
tickerdata[today, 1]
tickerdata[today, 1, drop=T]
as.numeric(tickerdata[today, 1, drop=T])
frstday =  today - (expdate - today)*projection
c(frstday:today)
tickerdata[c(frstday:today),]
tickerdata[c(frstday:today)]
paste0(frstday, '/', today)
tickerdata[paste0(frstday, '/', today), ]
tickerdata[paste0(frstday, '/', today), 'target']
tickerdata[paste0(frstday, '/', today), 'target'] = NA
tickerdata$target = NA
target = 1000
tickerdata[paste0(today, '/', expdate), 'target'] = target
tickerdata[paste0(frstday, '/', expdate),]
try.xts(x=NA)
c(as.Date('2012-01-01'):as.Date('2013-01-01'))
try.xts(x=NA, order.by = c(as.Date('2012-01-01'):as.Date('2013-01-01')))
seq(from=as.Date('2012-01-01'), to=as.Date('2013-01-01'))
seq(from=as.Date('2012-01-01'), to=as.Date('2013-01-01'), by=1)
try.xts(x=NA, order.by =  seq(from=as.Date('2012-01-01'), to=as.Date('2013-01-01'), by=1))
data.frame( dates = seq(from=as.Date('2012-01-01'), to=as.Date('2013-01-01'), by=1), val=1)
toxts = data.frame( dates = seq(from=as.Date('2012-01-01'), to=as.Date('2013-01-01'), by=1), val=1)
try.xts(x=toxts, order.by = dates)
toxts = data.frame( dates = seq(from=as.Date('2012-01-01'), to=as.Date('2013-01-01'), by=1), val=1)
toxts
View(toxts)
try.xts(x=toxts, order.by = toxts$dates)
try.xts(x=toxts[,1], order.by = toxts$dates)
toxts[,1]
try.xts(x=toxts[,2], order.by = toxts$dates)
seq(from=today, to=expdate, by=1)
targetdata = data.frame(dates = seq(from=today, to=expdate, by=1), target=target)
targetdata
try.xts(x = targetdata$target, order.by = targetdata$dates)
try.xts(x = targetdata[,2], order.by = targetdata$dates)
targetdata[,2]
targetdata[,2, drop=F]
try.xts(x = targetdata[,2, drop=F], order.by = targetdata$dates)
targetdata = try.xts(x = targetdata[,2, drop=F], order.by = targetdata$dates)
c(tickerdata, targetdata)
cbind(tickerdata, targetdata)
cbind(tickerdata, targetdata) %>% View
tickerdata = getSymbols(ticker, auto.assign = F)[, paste0(ticker, '.Close')]
today   = index(tickerdata) %>% max
expdate = today + period*365
frstday =  today - (expdate - today)*projection
tickerdata = tickerdata[paste0(frstday, '/', expdate),]
curprice = as.numeric(tickerdata[today, 1, drop=T])
s1 = curprice * s1
targetdata = data.frame(dates = seq(from=today, to=expdate, by=1), target=target)
targetdata = try.xts(x = targetdata[,2, drop=F], order.by = targetdata$dates)
chartdata = cbind(tickerdata, targetdata)
plot(chartdata)
require(ggplot2)
autoplot(chartdata)
plot(tickerdata)
tickerdata = getSymbols(ticker, auto.assign = F)[, paste0(ticker, '.Close')]
plot(tickerdata)
today   = index(tickerdata) %>% max
expdate = today + period*365
frstday =  today - (expdate - today)*projection
tickerdata = tickerdata[paste0(frstday, '/', expdate),]
curprice = as.numeric(tickerdata[today, 1, drop=T])
s1 = curprice * s1
targetdata = data.frame(dates = seq(from=today, to=expdate, by=1), target=target)
targetdata = try.xts(x = targetdata[,2, drop=F], order.by = targetdata$dates)
chartdata = cbind(tickerdata, targetdata)
View(chartdata)
names(chartdata) = c(ticker, 'Target')
View(chartdata)
c(row.names(chart.data))
row.names(chartdata)
index(chartdata)
require(googleVis)
gvisComboChart(data = chartdata,
xvar=c(index(chartdata)),
yvar=c(ticker, 'Target'),
options = list(
chartArea = "{left:100,top:10}",
series = "[{color:'red', targetAxisIndex: 0, lineWidth: 2},
{color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]",
height=300,
width=600,
seriesType='line',
legend= "{ position: 'bottom' }",
hAxis = "{baselineColor: 'white', gridlines: {color: 'white'}}"
) )
chartdata = as.data.frame(chartdata)
gvisComboChart(data = chartdata,
xvar=c(index(chartdata)),
yvar=c(ticker, 'Target'),
options = list(
chartArea = "{left:100,top:10}",
series = "[{color:'red', targetAxisIndex: 0, lineWidth: 2},
{color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]",
height=300,
width=600,
seriesType='line',
legend= "{ position: 'bottom' }",
hAxis = "{baselineColor: 'white', gridlines: {color: 'white'}}"
) )
chartdata
index(chartdata)
row.names(chartdata)
chartdata
gvisComboChart(data = chartdata,
xvar=c(row.names(chartdata)),
yvar=c(ticker, 'Target'))
gvisComboChart(data = chartdata,
xvar=c(row.names),
yvar=c(ticker, 'Target'))
gvisComboChart(data = chartdata,
xvar=row.names,
yvar=c(ticker, 'Target'))
chartdata$Dates = row.names(chartdata)
gvisComboChart(data = chartdata,
xvar='Dates',
yvar=c(ticker, 'Target'))
gvisComboChart(data = chartdata,
xvar='Dates',
yvar=c(ticker, 'Target')) %>% plot
gvisComboChart(data = chartdata,
xvar='Dates',
yvar=c(ticker, 'Target'),
options = list(
chartArea = "{left:100,top:10}",
series = "[{color:'red', targetAxisIndex: 0, lineWidth: 2},
{color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]",
height=300,
width=600,
seriesType='line',
legend= "{ position: 'bottom' }",
hAxis = "{baselineColor: 'white', gridlines: {color: 'white'}}"
) ) %>% plot
DrawAssetChart <- function(ticker, period, s1=1, target, projection=3) {
require(quantmod)
require(dplyr)
require(googleVis)
# temp vars
#   ticker = 'RTS.RS'
#   period = 1/4
#   target = 1000
tickerdata = getSymbols(ticker, auto.assign = F)[, paste0(ticker, '.Close')]
today   = index(tickerdata) %>% max
expdate = today + period*365
frstday =  today - (expdate - today)*projection
tickerdata = tickerdata[paste0(frstday, '/', expdate),]
curprice = as.numeric(tickerdata[today, 1, drop=T])
s1 = curprice * s1
targetdata = data.frame(dates = seq(from=today, to=expdate, by=1), target=target)
targetdata = try.xts(x = targetdata[,2, drop=F], order.by = targetdata$dates)
chartdata = cbind(tickerdata, targetdata) %>%
as.data.frame
chartdata = as.data.frame(chartdata)
names(chartdata) = c(ticker, 'Target')
chartdata$Dates = row.names(chartdata)
gchart = gvisComboChart(data = chartdata,
xvar='Dates',
yvar=c(ticker, 'Target'),
options = list(
chartArea = "{left:100,top:10}",
series = "[{color:'red', targetAxisIndex: 0, lineWidth: 2},
{color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]",
height=300,
width=600,
seriesType='line',
legend= "{ position: 'bottom' }",
hAxis = "{baselineColor: 'white', gridlines: {color: 'white'}}"
) )
gchart$html$footer = ''
gchart$html$caption = ''
return(gchart)
}
plot(DrawAssetChart('AAPL', 1/4, target = 1000))
plot(DrawAssetChart('AAPL', 1/4, target = 130))
StructProfile(seq(from=0.8, to=1.2, by=0.01), def=0.9) %>% plot
StructProfile = function(S.vector, strike=1, trade='c', def=1, ku=1, period=1){
if(trade=='c') trade=1 else trade=-1
result = sapply(S.vector, function(x){
(def + max(0, (x/strike-1)*trade*ku)) - 1
})
return(result)
}
StructProfile(seq(from=0.8, to=1.2, by=0.01), def=0.9) %>% plot
StructProfile(seq(from=0.8, to=1.2, by=0.01), def=0.9) %>% qplot
StructProfile(seq(from=0.8, to=1.2, by=0.01), def=0.9) %>% plot
AssetChartData <- function(ticker, period, s1=1, target, projection=3, outputformat = 'dataframe') {
require(quantmod)
require(dplyr)
require(tidyr)
require(googleVis)
# temp vars
#   ticker = 'RTS.RS'
#   period = 1/4
#   target = 1000
#  outputformat = c('dataframe', 'xts')
tickerdata = getSymbols(ticker, auto.assign = F)[, paste0(ticker, '.Close')]
today   = index(tickerdata) %>% max
expdate = today + period*365
frstday =  today - (expdate - today)*projection
tickerdata = tickerdata[paste0(frstday, '/', expdate),]
curprice = as.numeric(tickerdata[today, 1, drop=T])
s1 = curprice * s1
targetdata = data.frame(dates = seq(from=today, to=expdate, by=1), target=target)
targetdata = try.xts(x = targetdata[,2, drop=F], order.by = targetdata$dates)
chartdata = cbind(tickerdata, targetdata) %>%
as.data.frame
names(chartdata) = c(ticker, 'Target')
chartdata$Dates = row.names(chartdata)
if(outputformat=='dataframe')
chartdata = as.data.frame(chartdata)
return(chartdata)
}
AssetChartData('RTS.RS', 1, target=1000)
assetdata = AssetChartData('RTS.RS', 1, target=1000)
assetdata %>% row.names
assetdata %>% names
names(assetdata) %>% .[-'Dates']
names(assetdata) %>% .[-Dates]
yvars = names(assetdata)
which('Dates')
yvars ==('Dates')
yvars[ !='Dates']
yvars[ yvars!='Dates']
names(assetdata) %>% .[.!='Dates']
DrawAssetChart = function(assetdata){
yvars = names(assetdata) %>% .[.!='Dates']
gchart = gvisComboChart(data = chartdata,
xvar='Dates',
yvar=yvars,
options = list(
chartArea = "{left:100,top:10}",
series = "[{color:'red', targetAxisIndex: 0, lineWidth: 2},
{color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]",
height=300,
width=600,
seriesType='line',
legend= "{ position: 'bottom' }",
hAxis = "{baselineColor: 'white', gridlines: {color: 'white'}}"
) )
gchart$html$footer = ''
gchart$html$caption = ''
return(gchart)
}
DrawAssetChart(assetdata) %>% plot
DrawAssetChart = function(assetdata){
yvars = names(assetdata) %>% .[.!='Dates']
gchart = gvisComboChart(data = chartdata,
xvar='Dates',
yvar=yvars,
options = list(
chartArea = "{left:100,top:10}",
series = "[{color:'red', targetAxisIndex: 0, lineWidth: 2},
{color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]",
height=300,
width=600,
seriesType='line',
legend= "{ position: 'bottom' }",
hAxis = "{baselineColor: 'white', gridlines: {color: 'white'}}"
) )
gchart$html$footer = ''
gchart$html$caption = ''
return(gchart)
}
DrawAssetChart(assetdata) %>% plot
source('~/MyR/StructPlay/structplay.R')
DrawAssetChart(assetdata) %>% plot
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'xts')
View(assetdata)
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'xts')
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'xts') %>% View
source('~/MyR/StructPlay/structplay.R')
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'xts') %>% View
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'xts')
source('~/MyR/StructPlay/structplay.R')
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'xts') %>% View
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')
source('~/MyR/StructPlay/structplay.R')
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')
source('~/MyR/StructPlay/structplay.R')
source('~/MyR/StructPlay/structplay.R')
source('~/MyR/StructPlay/structplay.R')
source('~/MyR/StructPlay/structplay.R')
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')
DrawAssetChart(assetdata$chartdata) %>% plot
source('~/MyR/StructPlay/structplay.R')
DrawAssetChart(assetdata[['chartdata']]) %>% plot
assetdata[['chartdata']]
drawdata = assetdata[['chartdata']]
DrawAssetChart(drawdata) %>% plot
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')
DrawAssetChart(drawdata) %>% plot
drawdata = assetdata[['chartdata']]
DrawAssetChart(drawdata) %>% plot
source('~/MyR/StructPlay/structplay.R')
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')
DrawAssetChart(assetdata) %>% plot
source('~/MyR/StructPlay/structplay.R')
drawdata = assetdata[['chartdata']]
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')
drawdata = assetdata[['chartdata']]
DrawAssetChart(drawdata)
DrawAssetChart(as.data.frame(drawdata)) %>% plot
source('~/MyR/StructPlay/structplay.R')
DrawAssetChart(as.data.frame(drawdata)) %>% plot
chartdata = drawdata
colnames(chartdata) %>% .[.!='Dates']
source('~/MyR/StructPlay/structplay.R')
assetdata = AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')
drawdata = assetdata[['chartdata']]
DrawAssetChart((drawdata)) %>% plot
source('~/MyR/StructPlay/structplay.R')
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/MyR/StructPlay/structplay.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')[[-1]]
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')[[1]]
source('~/MyR/StructPlay/structplay.R')
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')[[2:4]]
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')[[c(2:4)]]
source('~/MyR/StructPlay/structplay.R')
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')[[c(2:4)]]
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')[[2]]
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')[[2:4]]
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')[2]
AssetChartData('RTS.RS', 1, target=1000, outputformat = 'dataframe')[2:4]
source('~/MyR/StructPlay/structplay.R')
shiny::runApp()
shiny::runApp()
source('~/MyR/StructPlay/structplay.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/MyR/StructPlay/structplay.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
StructParams(0.1, 0.2, 1, 1/4, 'c')
StructParams(0.1, 0.2, 1, 1/4, 'p')
source('~/MyR/StructPlay/structplay.R')
StructParams(0.1, 0.2, 1, 1/4, 'p')
StructParams(0.1, 0.2, 1, 1/4, 'c')
source('~/MyR/StructPlay/structplay.R')
source('~/MyR/StructPlay/structplay.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/MyR/StructPlay/structplay.R')
shiny::runApp()
source('~/MyR/StructPlay/structplay.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("markdown")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
