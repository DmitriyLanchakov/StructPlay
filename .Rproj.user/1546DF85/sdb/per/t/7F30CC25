{
    "contents" : "\nlibrary(quantmod)\nlibrary(ggplot2)\nlibrary(scales)\n### Input params ###\n\n\n# +-----------------------+\n# | Prepare data for plot |\n# +-----------------------+\n\nDataForPlot <- function (filepath, \n                         col.date=1, \n                         col.close=5, \n                         dateformat='%Y-%m-%d', \n                         expdate=NULL, \n                         target=NULL, \n                         s1=1, \n                         s2=NULL, \n                         projection=2.5, \n                         plot.type='gvis' ) {\n\n  require(dplyr)\n  library(tidyr)\n  \n  raw.data = read.csv(file = filepath) %>% select(col.date, col.close)\n  \n  names(raw.data) = c('xdate', 'xclose')\n  \n  raw.data$xdate = as.Date(strptime(as.character(raw.data$xdate), dateformat))\n  \n  today   = max(raw.data$xdate)\n  expdate = as.Date(expdate, dateformat)\n  frstday =  today - (expdate - today)*projection\n  \n  curprice = subset(raw.data, xdate==today, xclose, drop=T)\n  s1 = curprice * s1\n  \n  if(!is.null(s2))\n    s2 = curprice * s2 \n  \n  add.data = data.frame(xdate = as.Date(seq(from = today, to = expdate, by = 1)), xclose = NA, xtarget = target)\n  \n  raw.data1 = raw.data %>% filter(xdate > frstday) %>% bind_rows(add.data)\n  \n  # gvis plot data\n  if(plot.type == 'gvis') \n    return(raw.data1)\n  \n  \n  # ggplot 2 data\n  if(plot.type == 'ggplot') {\n    raw.data2 = gather(raw.data1, 'prices', 'values', 2:3)\n    return(raw.data2) \n  }\n  \n  \n}\n\n\n# +-----------------------------------+\n# | Load data with quantmod functions |\n# +-----------------------------------+\n\n  library(quantmod, quietly = T)\n\n### SPX ###\n\nlocal({\n  \n  getSymbols('^GSPC')\n  raw.data = as.data.frame(GSPC)[,c(4), drop=F]\n  write.csv(x = raw.data, file = 'spx.csv', append = F)\n  spx.data = DataForPlot('spx.csv', 1, 2, '%Y-%m-%d', '2016-01-17', 1850, 1, NULL, 4, 'gvis') #finam\n  plot(PlotBaseAsset(spx.data))  \n  \n})\n\n\n\n### GREK ###\n\nlocal({\n  \n  getSymbols('GREK')\n  raw.data = as.data.frame(GREK)[,c(4), drop=F]\n  write.csv(x = raw.data, file = 'grek.csv', append = F)\n  grek.data = DataForPlot('grek.csv', 1, 2, '%Y-%m-%d', '2016-03-18', 16, 1, NULL, 3, 'gvis') \n  plot(PlotBaseAsset(grek.data))  \n  \n})\n\n\n### RTSI ###\n\nlocal({\n  \n  getSymbols('RTS.RS')\n  raw.data = as.data.frame(RTS.RS)[,c(4), drop=F]\n  write.csv(x = raw.data, file = 'rtsi.csv', append = F)\n  rtsi.data = DataForPlot('rtsi.csv', 1, 2, '%Y-%m-%d', '2016-09-15', 1250, 1, NULL, 3, 'gvis') \n  plot(PlotBaseAsset(rtsi.data))  \n  \n})\n\n\n### MICEX  ###\n\nlocal({\n  \n  getSymbols('MICEXINDEXCF.ME')\n  raw.data = as.data.frame(MICEXINDEXCF.ME)[,c(4), drop=F]\n  write.csv(x = raw.data, file = 'micex.csv', append = F)\n  micex.data = DataForPlot('micex.csv', 1, 2, '%Y-%m-%d', '2015-12-15', 1250, 1, NULL, 3, 'gvis') \n  plot(PlotBaseAsset(micex.data))  \n  \n})\n\n\n### USDJPY ###\n\nlocal({\n  \n  getFX('USD/JPY')\n  raw.data = as.data.frame(USDJPY)\n  write.csv(x = raw.data, file = 'usdjpy.csv', append = F)\n  jpy.data = DataForPlot('usdjpy.csv', 1, 2, '%Y-%m-%d', '2015-12-15', 135, 1, NULL, 4, 'gvis') \n  plot(PlotBaseAsset(jpy.data))  \n  \n})\n\n\n### GOLD ###\n\nlocal({\n  \n  getFX('XAU/USD')\n  raw.data = as.data.frame(XAUUSD)\n  write.csv(x = raw.data, file = 'xau.csv', append = F)\n  xau.data = DataForPlot('xau.csv', 1, 2, '%Y-%m-%d', '2016-03-21', 1250, 1, NULL, 3, 'gvis') \n  plot(PlotBaseAsset(xau.data))  \n  \n})\n\n### USDRUB ###\n\nlocal({\n  \n  getFX('USD/RUB')\n  raw.data = as.data.frame(USDRUB)\n  write.csv(x = raw.data, file = 'rub.csv', append = F)\n  rub.data = DataForPlot('rub.csv', 1, 2, '%Y-%m-%d', '2015-12-15', 69, 1, NULL, 3, 'gvis') \n  plot(PlotBaseAsset(rub.data))  \n  \n})\n\n\n### EURUSD ###\n\nlocal({\n  \n  getFX('EUR/USD')\n  raw.data = as.data.frame(EURUSD)\n  write.csv(x = raw.data, file = 'eurusd.csv', append = F)\n  eurusd.data = DataForPlot('eurusd.csv', 1, 2, '%Y-%m-%d', '2016-03-21', 1, 1, NULL, 4, 'gvis') \n  plot(PlotBaseAsset(eurusd.data))  \n  \n})\n\n\n\n# grek.data = DataForPlot('c:\\\\Users\\\\arhipov\\\\Downloads\\\\grek.csv', 1, 5, '%Y-%m-%d', '2015-12-18', 15, 1, NULL, 3, 'gvis') #yahoo\n# spx.data = DataForPlot('c:\\\\Users\\\\arhipov\\\\Downloads\\\\SANDP.csv', 3, 5, '%Y%m%d', '20160117', 1850, 1, NULL, 4, 'gvis') #finam\n# jpy.data = DataForPlot('c:\\\\Users\\\\arhipov\\\\Downloads\\\\USDJPY.csv', 3, 5, '%Y%m%d', '20160115', 135, 1, NULL, 2.5, 'gvis') #finam\n# rub.data = DataForPlot('c:\\\\Users\\\\arhipov\\\\Downloads\\\\USD000UTSTOM.csv', 3, 5, '%Y%m%d', '20161215', 70, 1, NULL, 2.5, 'gvis')\n# gold.data = DataForPlot('c:\\\\Users\\\\arhipov\\\\Downloads\\\\comex.GC.csv', 3, 5, '%Y%m%d', '20151218', 1225, 1, NULL, 3, 'gvis') #finam\n\nmicex.data = DataForPlot('c:\\\\Users\\\\arhipov\\\\Downloads\\\\MICEX [Price].txt', 3, 8, '%Y%m%d', '20151218', 1980, 1.075, 1.15, 5, 'gvis') #finam\nplot(PlotBaseAsset(micex.data))\n\ngold.data = DataForPlot('c:\\\\Users\\\\arhipov\\\\Downloads\\\\comex.GC.csv', 3, 5, '%Y%m%d', '20160918', 1350, 1, NULL, 5, 'gvis') #finam\nplot(PlotBaseAsset(gold.data))\n\n# View(raw.data)\n\n# +-----------------------+\n# | Prepare data for plot |\n# +-----------------------+\n\nPlotBaseAsset = function(dataforplot){\n  \n  library(googleVis)\n  gchart = gvisComboChart(data = dataforplot, \n                          xvar=c('xdate'), \n                          yvar=c('xclose', 'xtarget'), \n                          options = list(\n                            series = \"[{color:'red', targetAxisIndex: 0, lineWidth: 2}, \n                                     {color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]\",\n                            height=400, \n                            width=600, \n                            seriesType='line', \n                            legend= \"{ position: 'bottom' }\",   \n                            hAxis = \"{baselineColor: 'white', gridlines: {color: 'white'}, format: 'MMM, y', maxAlternation: 1}\"\n                            \n                          ) )\n  \n  gchart$html$footer = ''\n  gchart$html$caption = ''\n  \n  return(gchart)\n  \n}\n\n\n\n# plot(PlotBaseAsset(grek.data))\n# plot(PlotBaseAsset(jpy.data))\n# plot(PlotBaseAsset(rub.data))\n# plot(PlotBaseAsset(gold.data))\n# +-----------------------+\n# | Prepare data for plot |\n# +-----------------------+\n\n\n#bdays =  subset(raw.data2,  prices=='xclose', xdate)[[1]]\n\nggchart = ggplot(data = dataforplot, aes(x=xdate, y=values, color=prices)) + \n  geom_line(size=1.2) + \n  scale_color_manual(values = c('red', 'grey30'), guide=guide_legend(title = NULL)) +\n  labs(x = NULL, y = NULL, title = NULL) + theme_bw(base_size = 16) + \n  theme(panel.border = element_rect(color='white'), \n        panel.grid.major.x=element_line(color='white'),\n        panel.grid.major.y=element_line(color='grey90'),\n        axis.ticks = element_line(color='grey50'),\n        axis.line = element_line(color='black'), axis.line.y = element_blank(),\n        legend.position=\"none\")\n\n\n### Add Target ###\nggchart = ggchart +\n  geom_segment(aes(x = today, xend = expdate, y = target, yend = target), color = 'red', linetype = 'dotted', size=1) +\n  geom_text(aes(label='Target', x=expdate, y=target, hjust=1, vjust=-1), color='grey30', size=rel(5))\n\n### Add S1 ###\nggchart = ggchart +\n  geom_segment(aes(x = today, xend = expdate, y = s1, yend = s1), color = 'black', linetype = 'dotted') +\n  geom_text(aes(label='', x=today, y=s1, hjust=0, vjust=1.2), color='grey40') \n\n\n### Add S2 ###\nggchart = ggchart +\n  geom_segment(aes(x = today, xend = expdate, y = s2, yend = s2), color = 'black', linetype = 'dotted') +\n  geom_text(aes(label='S2', x=today, y=s2, hjust=0, vjust=-1), color='grey40') \n\n#+  scale_x_bd(business.dates = bdays )\noptions(bitmapType=\"cairo\")\nggsave(file=paste('struct-', format(Sys.time(), '%Y-%m-%d_%H-%M'),'.png', sep=''), plot = ggchart, scale = 2, height= 6, width= 10, dpi= 300, units = \"cm\")\n\n  \n  scale_x_date(limits = c(frstday+30, expdate), labels = date_format(\"%Y-%b\"))\n  theme( plot.title = element_text(size = rel(1)),  \n         panel.background = element_rect(fill = 'white'),\n         panel.grid.major = element_line(color = '#999999', size = 0) ) +\n  theme_get()\n          \n\nggchart\n\nView((raw.data2))\n\n\n### Areas for hedge ###\n\nggchart1 = ggplot(data = raw.data1, aes(x=xdate, y=xclose)) + \n  geom_line(size=1.2, color='red') + \n  scale_color_manual(values = c('red', 'grey30'), guide = guide_legend(title = NULL)) + \n  labs(x = NULL, y = NULL, title = NULL) + \n  theme_bw(base_size = 16) + \n  theme(panel.border       = element_rect(color='white'), \n        panel.grid.major.x = element_line(color='white'),\n        panel.grid.major.y = element_line(color='grey90'),\n        axis.ticks         = element_line(color='grey50'),\n        axis.line          = element_line(color='black'), \n        axis.line.y        = element_blank(),\n        legend.position=\"none\")\n\n\n### forward ###\nggchart1 = ggchart1 + \n  annotate('rect', xmax = expdate, xmin = today, ymin = curprice, ymax = Inf, fill = \"blue\", alpha=0.1) +\n  annotate('rect', xmax = expdate, xmin = today, ymin = -Inf, ymax = curprice, fill = \"red\", alpha=0.1) +\n  scale_y_continuous(limits = c(30, 80))\n\n\n### option ###\nggchart1 =\n  ggchart1 + annotate('rect', xmax = expdate, xmin = today, ymin = curprice*1.02, ymax = Inf, fill = \"blue\", alpha=0.1) +\n  scale_y_continuous(limits = c(30, 80))\n\n\n### risk reversal ###\nggchart1 = ggchart1 + \n  annotate('rect', xmax = expdate, xmin = today, ymin = curprice*1.1, ymax = Inf, fill = \"blue\", alpha=0.1) +\n  annotate('rect', xmax = expdate, xmin = today, ymin = -Inf, ymax = curprice*0.95, fill = \"red\", alpha=0.1) +\n  scale_y_continuous(limits = c(30, 80))\n\n\n### partly hedged forward ###\nggchart1 = ggchart1 + \n  annotate('rect', xmax = expdate, xmin = today, ymin = curprice, ymax = 65, fill = \"blue\", alpha=0.2) +\n  scale_y_continuous(limits = c(30, 80))\n\n\n### call spread ###\nggchart1 = ggchart1 + \n  annotate('rect', xmax = expdate, xmin = today, ymin = curprice*1.05, ymax = Inf, fill = \"blue\", alpha=0.2) +\n  scale_y_continuous(limits = c(30, 80))\n\noptions(bitmapType=\"cairo\")\nggsave(file=paste('hedge-', format(Sys.time(), '%Y-%m-%d_%H-%M'),'.png', sep=''), plot = ggchart1, scale = 2, height= 6, width= 10, dpi= 300, units = \"cm\")\n\n",
    "created" : 1446621078486.000,
    "dirty" : false,
    "encoding" : "CP1251",
    "folds" : "",
    "hash" : "3431026221",
    "id" : "7F30CC25",
    "lastKnownWriteTime" : 1445569992,
    "path" : "~/MyR/.Structure/- chartsGvis.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}