{
    "contents" : "\n\n\nrequire(dplyr)\nlibrary(googleVis)\nlibrary(tidyr)\n\n\n#+------------------------------------+\n#  Option profile\n#+------------------------------------+\nOptionProfile = function(S.vector, startDate=NULL, endDate=NULL, price=0, face=1, ...){\n  \n  library(fOptions)\n  \n  params = list(...)\n  TypeFlag = substr(tolower(params$TypeFlag), 1, 1)\n  X = as.numeric(params$X)\n  \n  Time = params$Time\n  \n  if(is.null(params$sigma)){\n    params$sigma = 0.6\n    Time = 0\n  }\n  \n  if(is.null(Time))\n    Time = as.numeric(endDate - startDate)\n  \n  if(Time == 0)\n    Time = 0.0000001\n  \n  Time = as.numeric(Time)/252\n  \n  r = as.numeric(params$r)\n  b = r\n  sigma = as.numeric(params$sigma)\n  \n  result = sapply(S.vector, function(x){\n    \n    S = x\n    GBSOption(TypeFlag, S, X, Time, r, b, sigma)@price\n  }) - price\n  result = result * face\n  \n  return(result)\n}\n\n\n#+------------------------------------+\n#  Structured product\n#+------------------------------------+\n\nStructProfile = function(S.vector, def=1, ku=1, face=1, startDate=NULL, endDate=NULL, Time=NULL, ...){\n  \n  params = list(...)\n  X1 = params$X1\n  \n  result = sapply(S.vector, function(x){\n    \n    face * (def + max(0, x/X1-1) * ku)\n  })\n  \n  return(result)\n}\n\n\nStructParams = function(rdepo=0.1, def=1, assetPrice, ...){\n  \n  params = list(...)\n  \n  \n  optprice = OptionProfile(S.vector=assetPrice, startDate=params$startDate, endDate=params$endDate, Time=params$Time,\n                           sigma=params$sigma, r=params$r, TypeFlag=params$TypeFlag, X=params$X)\n  \n  if(is.null(params$Time)) \n    Time = as.numeric(as.Date(params$endDate) - as.Date(params$startDate))\n  else\n    Time = params$Time\n  \n  ku = (rdepo + 1-def) / (optprice / assetPrice / Time*365)\n  \n  return(list(Days=Time, Partn=ku))\n}\n\n\nload('chartdata.Rdata')\nlastpoint = raw.data[which.max(raw.data$Date),]\n\ntarget = 65\n# s1 = 1\n# s2 = 0.85\n\n# +-----------------------+\n# | Prepare data for plot |\n# +-----------------------+\n\n\n# LoadNSaveData = function(){\n#   \n#   require(dplyr)\n#   \n#   ticker = 'GREK'\n#   xfile.path = 'c:\\\\1\\\\grek.csv'\n#   col.date = 1\n#   col.close = 5\n#   xdate.format = '%Y-%m-%d'\n#   \n#   raw.data = read.csv(file = xfile.path)\n#   raw.data = raw.data %>% dplyr::select(col.date, col.close)\n#   names(raw.data) = c('Date', ticker)\n#   raw.data$Date = as.Date(strptime(as.character(raw.data$Date), xdate.format))\n#   save(raw.data, file = 'chartdata.Rdata')\n#   \n# }\n# \n# load(file = 'chartdata.Rdata')\n\n#### Base asset data prepared ###\n\nDrawAssetChart <- function (raw.data, expdate, ticker, s1=NULL, s2=NULL, target) {\n  \n  today   = max(raw.data$Date)\n  expdate = as.Date(expdate)\n  frstday =  today - (expdate - today)*2.5\n  \n  curprice =subset(raw.data, Date==today, get('ticker'), drop=T)\n  s1 = curprice * s1\n  s2 = curprice * s2 \n  \n  add.data = data.frame(Date=as.Date(seq(from=today, to=expdate, by=1)), Ticker = NA, Target = target)\n  names(add.data) = c('Date', ticker, 'Target')\n  \n  chart.data = raw.data %>% dplyr::filter(Date > frstday) %>% dplyr::bind_rows(add.data)\n  \n  # View(raw.data)\n \n  \n  gchart = gvisComboChart(data = chart.data, \n                          xvar=c('Date'), \n                          yvar=c(ticker, 'Target'), \n                          options = list(\n                            chartArea = \"{left:100,top:10}\",\n                            series = \"[{color:'red', targetAxisIndex: 0, lineWidth: 2},\n  {color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]\",\n                            height=300, \n                            width=600, \n                            seriesType='line', \n                            legend= \"{ position: 'bottom' }\",   \n                            hAxis = \"{baselineColor: 'white', gridlines: {color: 'white'}}\"\n                            \n                          ) )\n  gchart$html$footer = ''\n  gchart$html$caption = ''\n  \n  \n  return(gchart)\n}\n\n#plot(DrawAssetChart(raw.data, as.Date('2015-09-15'), ticker, s1=NULL, s2=NULL, target))\n\n",
    "created" : 1435912603296.000,
    "dirty" : false,
    "encoding" : "CP1251",
    "folds" : "",
    "hash" : "4271283082",
    "id" : "3FA2637D",
    "lastKnownWriteTime" : 1436886547,
    "path" : "~/RBackup/StructPlay/structplay.R",
    "project_path" : "structplay.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}