{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\n\nsource(file = 'structplay.R', echo=F)\n\nlibrary(shiny)\nlibrary(googleVis)\nlibrary(scales)\nlibrary(dplyr)\n\nshinyServer(function(input, output) {\n  \n  revals = reactiveValues()\n  \n  #\n  # Structured prams reactive list calculation\n  #  \n  \n  observe({\n    \n    input$faceInput\n    endDate = input$expdateInput\n    def = input$defInput/100\n    target = input$targetInput\n    assetPrice = as.numeric(lastpoint[[2]][drop=T])\n    startDate =  as.Date(lastpoint[[1]][drop=T])\n    \n    #print(paste('AssetPrice=', assetPrice, ))\n    \n    params = StructParams(rdepo=0.12, \n                          def=def, \n                          assetPrice=assetPrice, \n                          startDate=startDate, \n                          endDate=endDate, \n                          sigma=0.6,\n                          r=0.0, \n                          TypeFlag='c', \n                          X=assetPrice)\n    \n    params$startDate = startDate\n    params$endDate = endDate\n    params$s1 = assetPrice\n    params$target = target\n    params$payrate = (target/assetPrice - 1)*params$Partn\n    params$payratey = params$payrate/as.numeric(endDate - startDate)*365\n    \n    params$Partn_perc = percent(params$Partn)\n    params$payrate_perc = percent(params$payrate)\n    params$payratey_perc = percent(params$payratey)\n    \n   revals$params = params\n    \n    \n  })\n  \n  \n  #\n  # Render params table\n  #\n  output$paramsTable = renderGvis({\n    \n    result = as.data.frame((revals$params))\n    result = result %>% dplyr::select(Days, startDate, endDate, s1, target, Partn_perc, payrate_perc, payratey_perc)\n    result$startDate = as.character(result$startDate, '%d.%m.%Y')\n    result$endDate   = as.character(result$endDate, '%d.%m.%Y')\n    result = gather(result, 'xx', 'yy')\n    result$zz = c('Срок инвестирования, дней', 'Дата начала', 'Дата завершения', \"Начальная цена\", \"Целевой уровень\", \"Коэффициент участия\", \"Доходность за период, %\", \"Доходность, % годовых\")\n    result = result[, c('zz', 'yy')]\n    names(result) = c(\"Параметр\", \"Значение\")\n    \n    gvisTable(result, options=list(width='300', sort='disable'))\n    \n  })\n  \n  \n  #\n  # Render base asset chart\n  #\n  output$baseassetChart = renderGvis({\n    \n    #browser()\n    DrawAssetChart(raw.data, expdate =  input$expdateInput, ticker = 'GREK', target = input$targetInput)\n    \n  })\n  \n  #\n  # Render structured product profile chart\n  #\n  output$profileChart = renderGvis({\n    \n\n     def = input$defInput/100\n     ku = revals$params$Partn\n     face = input$faceInput\n     X1 = as.numeric(lastpoint[[2]][drop=T])\n     target = input$targetInput\n     \n     xEnd = X1 + abs(target - X1) * 1.1\n     xStart = X1 * (1- abs(xEnd/X1-1))\n     xPoints = seq(from = xStart, to = xEnd, length.out = 100)\n     \n    \n     prfl = StructProfile(xPoints, def=def, ku=ku, face=face, X1=X1 ) - face\n    chart.data = data.frame(GREK = xPoints, Profit=prfl, Breakeven=0)\n    \n    gchart = gvisComboChart(data = chart.data, \n                            xvar=c('GREK'), \n                            yvar=c('Profit', 'Breakeven'), \n                            options = list(\n                              chartArea = \"{left:100,top:10}\",\n                              series = \"[{color:'red', targetAxisIndex: 0, lineWidth: 2}, \n  {color: 'grey',targetAxisIndex: 0, lineWidth: 1, lineDashStyle: [4, 2]}]\",\n                              height=350, \n                              width=600, \n                              seriesType='line', \n                              legend= \"{ position: 'in' }\",   \n                              hAxis = \"{baselineColor: 'white', gridlines: {color: 'white'}}\"\n                              \n                              \n                            ) )\n    gchart$html$footer = ''\n    gchart$html$caption = ''\n    \n    gchart\n    \n  })\n  \n  \n  \n  \n  \n})\n\n",
    "created" : 1435911580206.000,
    "dirty" : false,
    "encoding" : "CP1251",
    "folds" : "",
    "hash" : "3133677704",
    "id" : "D9CB77AD",
    "lastKnownWriteTime" : 1436886787,
    "path" : "~/RBackup/StructPlay/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}